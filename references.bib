@unpublished{gartner,
title= {Distributed File Systems and Object Storage},
author = {Gartner-Peer-Insights},
year = {2023},
URL= {https://www.gartner.com/reviews/market/distributed-file-systems-and-object-storage},
note = {[Accessed: 06 Feb 2023]}
}
@unpublished{emergen,
title= {Cloud Object Storage Market},
author = {Emergen-Research},
year = {2021},
URL= {https://www.emergenresearch.com/industry-report/cloud-object-storage-market},
note = {[Accessed: 06 Feb 2023]}
}
@unpublished{kasperspy,
title= {Behavior-based Protection},
author = {Kasperspy},
year = {2023},
URL= {https://www.kaspersky.com/enterprise-security/wiki-section/products/behavior-based-protection},
note = {[Accessed: 06 Feb 2023]}
}
@unpublished{minio,
title= {MinIO Object Storage},
author = {MinIO},
year = {2023},
URL= {https://min.io/},
note = {[Accessed: 15 Mar 2023]}
}
@unpublished{minio-docs,
title= {MinIO Documentation},
author = {{MinIO Documentation Page}},
year = {2023},
URL= {https://docs.min.io/},
note = {[Accessed: 15 Mar 2023]}
}
@unpublished{minio-erasure,
title= {MinIO Erasure Coding},
author = {{MinIO Erasure Coding}},
year = {2023},
URL= {https://min.io/docs/minio/linux/operations/concepts/erasure-coding.html},
note = {[Accessed: 25 Apr 2023]}
}
@unpublished{minio-repo,
title= {MinIO GitHub Repository},
author = {MinIO},
year = {2023},
URL= {https://github.com/minio/minio},
note = {[Accessed: 15 Mar 2023]}
}
@unpublished{minio-go-repo,
title= {MinIO Go SDK Repository},
author = {MinIO},
year = {2023},
URL= {https://github.com/minio/minio-go},
note = {[Accessed: 15 Mar 2023]}
}
@unpublished{object-storage-market,
title= {The Object Storage Market},
author = {Anina Ot},
year = {2022},
URL= {https://www.enterprisestorageforum.com/cloud/cloud-object-storage-market/},
note = {[Accessed: 17 Mar 2023]}
}
@unpublished{amazon-md,
title= {Integrating Amazon S3 Malware Scanning into Your Application Workflow with Cloud Storage Security},
author = {Gokhul Srinivasan, and Aron Eidelman, and Ed Casmer},
year = {2022},
URL= {https://aws.amazon.com/blogs/apn/integrating-amazon-s3-malware-scanning-into-your-application-workflow-with-cloud-storage-security/},
note = {[Accessed: 21 Mar 2023]}
}
@unpublished{kafka-rabbitmq,
title= {Kafka vs RabbitMQ: Architecture, Performance, and Use Cases},
author = {Eran Levy},
year = {2022},
URL= {https://www.upsolver.com/blog/kafka-versus-rabbitmq-architecture-performance-use-case},
note = {[Accessed: 24 Mar 2023]}
}
@unpublished{kafka-raft,
title= {Installing Apache Kafka without Zookeeper: Easy Steps 101},
author = {Ishwarya M},
year = {2022},
URL= {https://hevodata.com/learn/kafka-without-zookeeper/},
note = {[Accessed: 24 Mar 2023]}
}
@unpublished{clamav,
title= {ClamAV},
author = {ClamAV},
year = {2023},
URL= {https://www.clamav.net/},
note = {[Accessed: 24 Mar 2023]}
}
@unpublished{zap-repo,
title= {Zap},
author = {uber-go},
year = {2023},
URL= {https://github.com/uber-go/zap},
note = {[Accessed: 25 Mar 2023]}
}
@unpublished{viper-repo,
title= {Viper},
author = {spf13},
year = {2023},
URL= {https://github.com/spf13/viper},
note = {[Accessed: 25 Mar 2023]}
}
@unpublished{kafka-go-repo,
title= {Kafka Go Repository},
author = {Segmentio},
year = {2022},
URL= {https://github.com/segmentio/kafka-go},
note = {[Accessed: 24 Mar 2023]}
}
@unpublished{go-tiny-abstraction,
title= {Why you shouldn't use func main in Go},
author = {Mat Ryer},
year = {2020},
URL= {https://pace.dev/blog/2020/02/12/why-you-shouldnt-use-func-main-in-golang-by-mat-ryer.html},
note = {[Accessed: 30 Mar 2023]}
}
@inbook{process-groups,
author = {Marshall Kirk McKusick and George V. Neville-Neil, and Robert N. M. Watson},
isbn = {9780321968975},
pages = {928},
publisher = {Addison-Wesley Professional},
edition = {2nd},
title = {Process Management in the FreeBSD Operating System},
booktitle = {Design and Implementation of the FreeBSD Operating System},
year = {2014},
URL= {https://www.informit.com/articles/article.aspx?p=2249436&seqNum=8},
}
@unpublished{go-closing-channels,
title= {Closing Channels},
author = {{Go by Example}},
year = {2022},
URL= {https://gobyexample.com/closing-channels},
note = {[Accessed: 30 Mar 2023]}
}
@unpublished{go-channel-ranges,
title= {Ranging over channels},
author = {{Go by Example}},
year = {2022},
URL= {https://gobyexample.com/range-over-channels},
note = {[Accessed: 30 Mar 2023]}
}
@unpublished{go-waitgroups,
title= {WaitGroups},
author = {{Go by Example}},
year = {2022},
url = {https://gobyexample.com/waitgroups},
note = {[Accessed: 30 Mar 2023]}
}
@Article{class-diagrams,
author = {Aboshady, Doaa and Ghannam, Naglaa and Elsayed, Eman and Diab, Lamiaa},
title = {The Malware Detection Approach in the Design of Mobile Applications},
journal = {Symmetry},
volume = {14},
year = {2022},
number = {5},
article-number = {839},
url = {https://www.mdpi.com/2073-8994/14/5/839},
issn = {2073-8994},
abstract = {Background: security has become a major concern for smartphone users in line with the increasing use of mobile applications, which can be downloaded from unofficial sources. These applications make users vulnerable to penetration and viruses. Malicious software (malware) is unwanted software that is frequently used by cybercriminals to launch cyber-attacks. Therefore, the motive of the research was to detect malware early before infection by discovering it at the application-design level and not at the code level, where the virus will have already damaged the system. Methods: in this article, we proposed a malware detection method at the design level based on reverse engineering, the unified modeling language (UML) environment, and the web ontology language (OWL). The proposed method detected &ldquo;Data_Send_Trojan&rdquo; malware by designing a UML model that simulated the structure of the malware. Then, by generating the ontology of the model, and using RDF query language (SPARQL) to create certain queries, the malware was correctly detected. In addition, we proposed a new classification of malware that was suitable for design detection. Results: the proposed method detected Trojan malware that appeared 552 times in a sample of 600 infected android application packages (APK). The experimental results showed a good performance in detecting malware at the design level with precision and recall of 92% and 91%, respectively. As the dataset increased, the accuracy of detection increased significantly, which made this methodology promising.},
doi = {10.3390/sym14050839}
}
@Article{uml-diagrams,
author = {J. Yang},
booktitle = {2010 Fifth International Conference on Frontier of Computer Science and Technology},
title = {Analyzing UML Sequence Diagrams with UTP},
year = {2009},
pages = {417-423},
doi = {10.1109/FCST.2009.73},
url = {https://doi.ieeecomputersociety.org/10.1109/FCST.2009.73},
publisher = {IEEE Computer Society},
}
@Article{moscow-prioritization,
author = "Marthasari Gita and Suharso Wildan and Ardiansyah Frendy Ardiansyah",
title = "Personal Extreme Programming with MoSCoW Prioritization for Developing Library Information System",
journal = "IAES Indonesia Section",
volume = "Vol 5: EECSI 2018",
pages = "",
year = "2018",
url = http://journal.portalgaruda.org/index.php/EECSI/article/view/1701/1140
abstract = "Software development projects require experience and knowledge of the developer or clients related to the system which will be developed. Unclear clients' needs potentially emerge many changes of needs during the process of development which can not be resolved by using conventional software development methodology. The implementation on the less significant requirements either from the clients or the system cause the development of the project took a long time. In this paper, we combine personal extreme programming (PXP) methodology with Moscow technique to overcome those problems. PXP is suitable to use in small to medium-sized projects if the clients do not know in detail about the needs in the development of application, application needed in relatively quick time, and the development phase is adjusted to use by a single programmer. Moscow technique was used for prioritizing requirements elicited in PXP methodology. Moscow is a method to determine priority needs based on cost, risk, and business value. This technique was applied during the planning phase of PXP to develop library application, thereby it reduced the time of project completion. The result was a library application suited the needs of clients to support business processes at Batu State Attorney's library.",
}
@unpublished{,
title= {},
author = {},
year = {2022},
URL= {},
note = {[Accessed: 24 Mar 2023]}
}
@unpublished{,
title= {},
author = {},
year = {2022},
URL= {},
note = {[Accessed: 24 Mar 2023]}
}
@unpublished{,
title= {},
author = {},
year = {2022},
URL= {},
note = {[Accessed: 24 Mar 2023]}
}
@unpublished{,
title= {},
author = {},
year = {2022},
URL= {},
note = {[Accessed: 24 Mar 2023]}
}
